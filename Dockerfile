# 1. Выбираем официальный базовый образ Python.
# slim-buster - это легковесная версия Debian, что делает наш итоговый образ меньше.
FROM python:3.12-slim

# 2. Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды будут выполняться в /app.
WORKDIR /app

# 3. Устанавливаем Poetry.
# Мы отключаем создание виртуальных окружений, так как Docker-контейнер сам по себе является изоляцией.
RUN pip install poetry
RUN poetry config virtualenvs.create false

# 4. Копируем файлы зависимостей в контейнер.
# Копируем их отдельно от остального кода для кеширования. Docker не будет переустанавливать зависимости, если эти файлы не менялись.
COPY pyproject.toml poetry.lock ./

# 5. Устанавливаем зависимости проекта.
# --no-root, чтобы не устанавливать сам проект как библиотеку.
# --no-dev, чтобы не ставить зависимости для разработки (например, pytest).
RUN poetry install --no-root

# 6. Копируем весь исходный код нашего приложения в рабочую директорию.
COPY . .

# 7. Указываем команду, которая будет запускаться при старте контейнера.
# Запускаем Uvicorn сервер. --host 0.0.0.0 делает его доступным извне контейнера.
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]